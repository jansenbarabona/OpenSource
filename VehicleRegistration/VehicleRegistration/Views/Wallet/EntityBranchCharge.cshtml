@using VehicleRegistration.Models
@using VehicleRegistration.Tools
@model TransactionEntityBranchModel

@{
    ViewBag.Title = "EntityCharge";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<section class="content">
    <div class="card">
        <div class="card-header">

            <div class="card-tools">

                <button type="button" class="btn btn-tool" data-toggle="tooltip" title="Back" onclick="location.href='@Url.Action("EntityBranchChargeList", "Wallet")'">
                    @*<i class="close"></i>*@
                    <i class="far fa-times-circle"></i>
                    @*<i class="far fa-arrow-alt-circle-right"></i>*@
                </button>
            </div>
            <h6><i class="nav-icon fas fa-users-cog"></i> Entity Charge Register   <small></small></h6>
        </div>
        <!-- /.card-header -->
        <article class="card-body">
            @using (Html.BeginForm("EntityBranchCharge", "Wallet", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @*@Html.HiddenFor(o => o.TransactionEntityTypeID)*@
                @Html.HiddenFor(o => o.TransactionEntityBranchID)
                <!-- Div start-->
                <div class="row">

                    @if (CurrentUser.Details.UserEntityID == (int)UserEntityEnum.DataBridgeAsia)
                    {
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(m => m.UserEntityList)
                            <div class="input-group">

                                <div class="input-group-prepend">

                                    <span class="input-group-text"> <i class="fas fa-sitemap"></i> </span>
                                </div>
                                @Html.DropDownListFor(m => m.UserEntityID, new SelectList(Model.UserEntityList, "UserEntityID", "UserEntityName"), "Select Entity", new { @class = "form-control select2" })
                            </div>
                            @Html.ValidationMessageFor(m => m.UserEntityID, "", new { @class = "" })
                        </div>
                        <div id="refrence_field" class="form-group col-lg-4">
                            @Html.LabelFor(m => m.EntityID)
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"> <i class="fas fa-sitemap"></i> </span>
                                </div>
                                @switch (Model.UserEntityID)
                                {
                                    case (int)UserEntityEnum.MAI:
                                        @Html.DropDownListFor(m => m.EntityID,
                                          new SelectList(Model.MAIList, "MAIID", "MAIName"),
                                          "Select MAI Type", new { @class = "form-control select2" })
                                        break;
                                    case (int)UserEntityEnum.Dealer:
                                        @Html.DropDownListFor(m => m.EntityID,
                                          new SelectList(Model.DealerList, "DealerID", "DealerName"),
                                          "Select Dealer", new { @class = "form-control select2" })
                                        break;
                                    case (int)UserEntityEnum.Insurance:
                                        @Html.DropDownListFor(m => m.EntityID,
                                          new SelectList(Model.InsuranceList, "InsuranceID", "InsuranceName"),
                                          "Select Insurance", new { @class = "form-control select2" })
                                        break;
                                    default:
                                        @Html.DropDownListFor(m => m.EntityID,
                                            new List<SelectListItem> {new SelectListItem { Value = "" , Text = "Select Reference" }
                                            }, new { @class = "form-control select2" })
                                        break;
                                }

                            </div>
                            @Html.ValidationMessageFor(m => m.EntityID, "", new { @class = "" })
                        </div>
                        <div id="branch_field" class="form-group col-lg-4">
                            @Html.LabelFor(m => m.BranchID)
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"> <i class="fas fa-sitemap"></i> </span>
                                </div>
                                @switch (Model.UserEntityID)
                                {

                                    case (int)UserEntityEnum.Dealer:
                                        @Html.DropDownListFor(m => m.BranchID,
                                          new SelectList(Model.DealerBranchList, "DealerBranchID", "DealerBranchName"),
                                          "Select Dealer", new { @class = "form-control select2" })
                                        break;
                                    case (int)UserEntityEnum.Insurance:
                                        @Html.DropDownListFor(m => m.BranchID,
                                          new SelectList(Model.InsuranceBranchList, "InsuranceBranchID", "InsuranceBranchName"),
                                          "Select Insurance", new { @class = "form-control select2" })
                                        break;
                                    default:
                                        @Html.DropDownListFor(m => m.BranchID,
                                                   new List<SelectListItem> {new SelectListItem { Value = "" , Text = "Select Reference" }
                                                   }, new { @class = "form-control select2" })
                                        break;
                                }

                            </div>
                            @Html.ValidationMessageFor(m => m.EntityID, "", new { @class = "" })
                        </div>
                    }

                </div>
                <div class="row">
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(m => m.TransactionTypelist)
                        <div class="input-group">

                            <div class="input-group-prepend">

                                <span class="input-group-text"> <i class="fas fa-sitemap"></i> </span>
                            </div>
                            @Html.DropDownListFor(m => m.TransactionTypeID, new SelectList(Model.TransactionTypelist, "TransactionTypeID", "TransactionName"), "Select Transaction", new { @class = "form-control select2" })
                        </div>
                        @Html.ValidationMessageFor(m => m.TransactionTypeID, "", new { @class = "" })
                    </div>
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(m => m.Amount)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text "> <i class="fas fa-ruble-sign"></i> </span>
                            </div>
                            @Html.TextBoxFor(m => m.Amount, new { placeholder = "Amount", @class = "form-control", type = "number", @step = 0.01 })
                        </div>
                        @Html.ValidationMessageFor(m => m.Amount, "", new { @class = "" })
                    </div>
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(m => m.EffectivityDate)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text "> <i class="fas fa-calendar"></i> </span>
                            </div>
                            @Html.EditorFor(m => m.EffectivityDate, new { htmlAttributes = new { @class = "form-control", placeholder = "Date Issued", @type = "date" } })
                        </div>
                        @Html.ValidationMessageFor(m => m.EffectivityDate, "", new { @class = "" })
                    </div>
                </div>

                if (ViewBag.Edit == false)
                {
                    <center>
                        <div class="form-group">
                            <center>
                                <button type="submit" name="submit" value="Create" class="btn btn-primary btn-block" style="width:250px;"> Create </button>
                            </center>
                        </div>
                    </center>
                }
                else
                {
                    <center>
                        <div class="form-group row">
                            <button type="button" data-toggle="modal" data-target="#modal-delete" class="btn btn-danger btn-block col-xs-12 col-sm-12 col-md-4 col-lg-4" style="width:250px;"> Delete </button>
                            <div class="col-xs-12 col-sm-12 col-md-4 col-lg-4"></div>
                            <button type="button" data-toggle="modal" data-target="#modal-save" class="btn btn-success btn-block col-xs-12 col-sm-12 col-md-4 col-lg-4" style="width:250px;"> Save </button>
                        </div>
                    </center>
                }
                Html.RenderPartial("_Confirmation");

                <div id="EntityChargeList">

                </div>
            }
        </article>
        <!-- /.card-body -->
    </div>
    <!-- /.card -->
</section>

<script>
    $("#left_nav_dbinc").toggleClass("menu-open");
    $("#left_nav_ul_vehicle").css("display", "block");
    $("#entity_charge_list").toggleClass("active");
    ///// automatic open navbar after login ///////
    $("#left_nav_dbinc").toggleClass("menu-open");
    $("#left_nav_admin_insurance").toggleClass("menu-open");
    $("#left_nav_dlr").toggleClass("menu-open");
    $("#left_nav_mai").toggleClass("menu-open");
    ///// end automatic open navbar after login ///////
        $("#UserEntityID").on("change", function () {
                                var entity = $(this).val();
            $("#EntityID").val("");

            $("#EntityID").find("option:gt(0)").remove();
            $.ajax({
                                url: '@Url.Action("GetEntityList", "Wallet")',
                    type: "POST",
                    dataType: "JSON",
                    cache: false,
                    data: addAntiForgeryToken({ "EntityTypeID": this.value }),
                    success: function (response) {
                                        switch (entity) {
                                            case "2":
                                //MAI
                                $.each(response, function (index, value) {
                                                    var o = new Option(value.MAIName, value.MAIID);
                                    $("#EntityID").append($(o));
                                                });
                                $("label[for='EntityID']").text("MAI");
                                                break;
                                            case "3":
                                //Dealer
                                $.each(response, function (index, value) {
                                                    var o = new Option(value.DealerName, value.DealerID);
                                    $("#EntityID").append($(o));
                                                });
                                $("label[for='EntityID']").text("Dealer");
                                                break;
                                            case "4":
                                //Insurance
                                $.each(response, function (index, value) {
                                                    var o = new Option(value.InsuranceName, value.InsuranceID);
                                    $("#EntityID").append($(o));
                                                });
                                $("label[for='EntityID']").text("Insurance");
                                                break;
                                        }

                                    },
                    error: function (xhr, status, error) {
                                        alert(error);
                                    }
                                });
        });

    $("#EntityID").on("change", function () {
        $("#BranchID").val("");
        $("#BranchID").find("option:gt(0)").remove();
        var entity = $("#UserEntityID").val();
        $.ajax({
            url: '@Url.Action("GetEntityBranchList", "Wallet")',
            type: "POST",
            data: addAntiForgeryToken({ "UserEntityID": $("#UserEntityID").val(), "EntityID": $("#EntityID").val() }),
            cache: false,
            async: true,
            success: function (response) {
                switch (entity) {
                    case "2":
                        //MAI
                        //$.each(response, function (index, value) {
                        //    var o = new Option(value.MAIName, value.MAIID);
                        //    $("#EntityID").append($(o));
                        //});
                        //$("label[for='EntityID']").text("MAI");
                        break;
                    case "3":
                        //Dealer
                        $.each(response, function (index, value) {
                            var o = new Option(value.DealerBranchName, value.DealerBranchID);
                            $("#BranchID").append($(o));
                        });
                        $("label[for='BranchID']").text("Dealer Branch");
                        break;
                    case "4":
                        //Insurance
                        $.each(response, function (index, value) {
                            var o = new Option(value.InsuranceBranchName, value.InsuranceBranchID);
                            $("#BranchID").append($(o));
                        });
                        $("label[for='BranchID']").text("Insurance Branch");
                        break;
                }
            },
            error: function (xhr, status, error) {
                alert(xhr.responseText);
            }
        });
    });

    var addAntiForgeryToken = function (data) {
        data.__RequestVerificationToken = $("[name='__RequestVerificationToken']").val();
        return data;
        };

        @*$("#EntityID").on("change", function () {
        $.ajax({
            url: '@Url.Action("GetEntityChargeList", "Wallet")',
            type: "POST",
            data: addAntiForgeryToken({ "EntityTypeID": $("#UserEntityID").val(), "EntityID": $("#EntityID").val() }),
            cache: false,
            async: true,
            success: function (result) {
                $("#EntityChargeList").html(result);

                $("#tbl_list").DataTable({
                    "scrollX": true,
                    "scrollY": true,
                    "info": false,
                    "lengthChange": false,
                    "order": [],
                    "dom":
                        "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-12 col-md-5'p><'col-sm-12 col-md-7'i>>",
                });
            }
        });
    });*@
</script>

